Note.java
    - Exposing the integer values inside the class of the indexes breaks encapsulation (Redesign)
    - Refactor !!!

Chord.java
	- Rewrite the chord method to preserver the order when the new list of overtones
	   is created.

Scale.java
	- Optimize degreeOf(NoteI)

NoteCollectionFactory.java
	- ... a lot of things ... but for now ...
	- Fix boolean methods that classify chords, used by the name(Scale s) method of Chord class
    - Make a way to iterating trough the notes ... implement iterator or something
    - Make the note lsit be inmutable after created
    - Implement an overtones function

KeyTest.java
	- got the adjacency lists. Have to make better overtone and common note relation functions.
	- and make a progression generator
  - add Sus2 and Sus4 chords to the list of available chords
	
General
	- Create a Chord class for unidentified chords and Scales

====
 Create a maven projetc structure and modify the package signatures ... done
 Create a jar or other way to distribute the library ... done
 Create a github repository ... done
 Create unit tests ... 
  Note ... done
  NoteCollection
  Scale
  Chord
 Create a JavaFx interface
 Create an android app
 Create a SpringMVC web app that serves some service using the library
  use angular ...
 Create a Key class
 Create a ProgressionGenerator interface
  In every ProgressionGenerator there will be a generator that uses the Key's adj list of chords
  ( The criteria by which the adj List of Chords whithin a key is generated should be able
     to be changed. By means of a comparator ? ... a Function<R, V> ? ... we'll see
  )
   Interesting chord generators: Markov Chain Generator, Genetic Algorithm Generator, Neural Net
    Generator, Song Writer .... etc
  and according to a customized criteria it will generate chord progressions from a starting chord
  to an end chord, or maybe fill in the blanks in a progression that is half way finished.
 fix the overtone things.

====
