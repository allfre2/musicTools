import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;

// DELETEME

// import java.util.Thread;

//
public class Note implements NoteI{

 public static final String[] Notes = {"c", "d", "e", "f", "g", "a", "b"};
 public static final int[] semitones = {0 ,  2 ,  4 ,  5 ,  7 ,  9 ,  11};
 public static final String[][] modifiers = {
 	{"bb","ùÑ´"}, // double flat , -2, (i - 2)
 	{"b","‚ô≠"},  // flat        , -1
 	{"=","‚ôÆ"},  // natural     ,  0
 	{"#","‚ôØ"},  // sharp       ,  1
 	{"##","ùÑ™"}  // double sharp,  2
 };

 protected boolean useUnicode;
 protected boolean upperCase;

 protected int noteIndex;
 protected int altIndex;
 protected int noteInt;

 public Note(String note){
    this(note.substring(0,1).toLowerCase(),
  	     note.substring(1));
 }

 public Note(int note){

 }

 public Note(String note, String alt){

  useUnicode = true;
  upperCase = true;

  this.noteIndex = Arrays.asList(Notes).indexOf(note.toLowerCase());
  if(this.noteIndex < 0){
  	this.noteIndex = 0; // C
  }

  this.altIndex = 2; // default to natural

  for (int i = 0; i < modifiers.length; ++i){
    if(Arrays.asList(modifiers[i]).indexOf(alt) > -1){
    	this.altIndex = i; // natural
    }
  }
  this.noteInt = semitones[this.noteIndex] + (this.altIndex - 2);
 }

 public void useUnicode(boolean value){
 	this.useUnicode = value;
 }

 public void upperCase(boolean value){
 	this.upperCase = value;
 }

 public List<NoteI> Overtones(){
 
   return null;
 }

// DELETEME
  public void sleep(int t){
  	try{
  		Thread.sleep(t);
  	}catch(InterruptedException e){
  		e.printStackTrace();
  	}
  }

  public void getchar(){
    try{
    	System.in.read();
    }catch(Exception e){
    	e.printStackTrace();
    }
  }
 //
 /* An interval is a number beetwen 1 and 8 */

 // Normalize the index for the intervals
 private int intervalNoteIndex(int interval){
   if(interval < 1) interval = 1; // FIX this!

   return (interval-1) % Notes.length;
 }

 // Returns the number of semitones between the current note and the
 // new one
 private int intervalDistance(int newNoteIndex){
 	int dist;
  	if(newNoteIndex < this.noteIndex){
      dist = 1 + (semitones[semitones.length-1] - semitones[this.noteIndex]);
      dist += semitones[newNoteIndex];
  	}
  	else{
  		dist = semitones[newNoteIndex] - semitones[this.noteIndex];
  	}
  	dist += 2 + -this.altIndex;
  	return dist;
 }

 public NoteI aug(int interval){
 	int index = intervalNoteIndex(interval);
 	System.out.println("\t\t interval: " + interval + ", index: "+ index);
 	System.out.println("\t\tsemitones: " + semitones[index]);
 	getchar();
	int newNoteIndex = (this.noteIndex + index) % Notes.length;
	System.out.println("\t\t newNoteIndex: "+ newNoteIndex + " newNote: " + Notes[newNoteIndex]);
 	getchar();

	int intervalDistance = semitones[index] - semitones[0] + 1;
	if(interval%8 < 2){
		intervalDistance -= 1;
	}

	System.out.println("\t\tintervalDistance: "+ intervalDistance);
 	getchar();
  	String noteLetter = Notes[newNoteIndex]; // got name ...
  	System.out.println("\t\t noteLetter: " + noteLetter);
  	getchar();
  	int currIntervalDistance = intervalDistance(newNoteIndex);
  	System.out.println("\t\t currIntervalDistance: " + currIntervalDistance);
  	getchar();
  	int newnoteAltIndex;
  	// Some notes provoque IndexOutOfBounds because need of three alteration signs
  	if(currIntervalDistance > intervalDistance){
  		newnoteAltIndex = 2 - (currIntervalDistance - intervalDistance);
  	}
  	else{
  		newnoteAltIndex = 2 + (intervalDistance - currIntervalDistance);
  	}
  	System.out.println("\t\t newnoteAltIndex: " + newnoteAltIndex);
  	getchar();

  	return new Note(noteLetter,modifiers[newnoteAltIndex][useUnicode ? 1 : 0]);
 }
 public NoteI major(int interval){
 	int index = intervalNoteIndex(interval);
 	System.out.println("\t\t interval: " + interval + ", index: "+ index);
 	System.out.println("\t\tsemitones: " + semitones[index]);
 	getchar();
	int newNoteIndex = (this.noteIndex + index) % Notes.length;
	System.out.println("\t\t newNoteIndex: "+ newNoteIndex + " newNote: " + Notes[newNoteIndex]);
 	getchar();

	int intervalDistance = semitones[index] - semitones[0];

	System.out.println("\t\tintervalDistance: "+ intervalDistance);
 	getchar();
  	String noteLetter = Notes[newNoteIndex]; // got name ...
  	System.out.println("\t\t noteLetter: " + noteLetter);
  	getchar();
  	int currIntervalDistance = intervalDistance(newNoteIndex);
  	System.out.println("\t\t currIntervalDistance: " + currIntervalDistance);
  	getchar();
  	int newnoteAltIndex;
  	// Some notes provoque IndexOutOfBounds because need of three alteration signs
  	if(currIntervalDistance > intervalDistance){
  		newnoteAltIndex = 2 - (currIntervalDistance - intervalDistance);
  	}
  	else{
  		newnoteAltIndex = 2 + (intervalDistance - currIntervalDistance);
  	}
  	System.out.println("\t\t newnoteAltIndex: " + newnoteAltIndex);
  	getchar();

  	return new Note(noteLetter,modifiers[newnoteAltIndex][useUnicode ? 1 : 0]);
 }

 public NoteI minor(int interval){
 	int index = intervalNoteIndex(interval);
 	System.out.println("\t\t interval: " + interval + ", index: "+ index);
 	System.out.println("\t\tsemitones: " + semitones[index]);
 	getchar();
	int newNoteIndex = (this.noteIndex + index) % Notes.length;
	System.out.println("\t\t newNoteIndex: "+ newNoteIndex + " newNote: " + Notes[newNoteIndex]);
 	getchar();

	int intervalDistance = semitones[index] - semitones[0]
	 - 1; // minor
	 interval = interval % 8;
	 if(interval < 2 || interval == 4 || interval == 5)
	 	return just(interval);

	System.out.println("\t\tintervalDistance: "+ intervalDistance);
 	getchar();
  	String noteLetter = Notes[newNoteIndex]; // got name ...
  	System.out.println("\t\t noteLetter: " + noteLetter);
  	getchar();
  	int currIntervalDistance = intervalDistance(newNoteIndex);
  	System.out.println("\t\t currIntervalDistance: " + currIntervalDistance);
  	getchar();
  	int newnoteAltIndex;
  	if(currIntervalDistance > intervalDistance){
  		newnoteAltIndex = 2 - (currIntervalDistance - intervalDistance);
  	}
  	else{
  		newnoteAltIndex = 2 + (intervalDistance - currIntervalDistance);
  	}
  	System.out.println("\t\t newnoteAltIndex: " + newnoteAltIndex);
  	getchar();

  	return new Note(noteLetter,modifiers[newnoteAltIndex][useUnicode ? 1 : 0]);
 }

 public NoteI dim(int interval){
 	int index = intervalNoteIndex(interval);
 	System.out.println("\t\t interval: " + interval + ", index: "+ index);
 	System.out.println("\t\tsemitones: " + semitones[index]);
 	getchar();
	int newNoteIndex = (this.noteIndex + index) % Notes.length;
	System.out.println("\t\t newNoteIndex: "+ newNoteIndex + " newNote: " + Notes[newNoteIndex]);
 	getchar();

	int intervalDistance = semitones[index] - semitones[0]
	 - 1; // minor
	 interval = interval % 8;
	 if(interval < 2 || interval == 4 || interval == 5)
	 	return just(interval);
	 
	System.out.println("\t\tintervalDistance: "+ intervalDistance);
 	getchar();
  	String noteLetter = Notes[newNoteIndex]; // got name ...
  	System.out.println("\t\t noteLetter: " + noteLetter);
  	getchar();
  	int currIntervalDistance = intervalDistance(newNoteIndex);
  	System.out.println("\t\t currIntervalDistance: " + currIntervalDistance);
  	getchar();
  	int newnoteAltIndex;
  	if(currIntervalDistance > intervalDistance){
  		newnoteAltIndex = 2 - (currIntervalDistance - intervalDistance);
  	}
  	else{
  		newnoteAltIndex = 2 + (intervalDistance - currIntervalDistance);
  	}
  	System.out.println("\t\t newnoteAltIndex: " + newnoteAltIndex);
  	getchar();

  	return new Note(noteLetter,modifiers[newnoteAltIndex][useUnicode ? 1 : 0]);
 }

 public NoteI just(int interval){
  return new Note("C");

 }

 public NoteI Interval(int interval){
   return null; 
 }

 @Override
 public String toString(){
 	String note = Notes[this.noteIndex];
 	if(upperCase) note = note.toUpperCase();
 	if(this.altIndex != 2){
 		note += modifiers[this.altIndex][useUnicode ? 1 : 0];
 	}
 	return note; 
 }
}
